generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  name       String
  email      String
  password   String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("users")
}

model Category {
  id         String    @id @default(uuid())
  name       String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  products   Product[]

  @@map("categories")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  price       String
  description String
  amount      Int
  created_at  DateTime?   @default(now())
  updated_at  DateTime?   @default(now())

  category    Category    @relation(fields: [category_id], references: [id])
  category_id String
  items       Item[]
  orderItems  OrderItem[] // Relação inversa com OrderItem adicionada

  @@map("products")
}

model Item {
  id         String    @id @default(uuid())
  amount     Int
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  product    Product   @relation(fields: [product_id], references: [id])
  product_id String

  @@map("items")
}

model Customer {
  id            String         @id @default(uuid())
  name          String
  email         String?
  cpf           String?
  cnpj          String?
  address       String?
  neighborhood  String?
  city          String?
  created_at    DateTime?      @default(now())
  updated_at    DateTime?      @default(now())
  orders        Order[]
  serviceOrders ServiceOrder[]

  branchId      String         // Additional field for branch ID
  branchCode    String         // Additional field for branch code

  @@map("customers")
}


model Order {
  id          String    @id @default(uuid())
  total       Float
  created_at  DateTime? @default(now())
  updated_at  DateTime? @default(now())
  customer_id String
  customer    Customer  @relation(fields: [customer_id], references: [id])
  orderItems  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String    @id @default(uuid())
  quantity   Int
  price      Float     // Preço unitário no momento da compra
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  order      Order     @relation(fields: [order_id], references: [id])
  order_id   String

  product    Product   @relation(fields: [product_id], references: [id])
  product_id String

  @@map("order_items")
}

model ServiceOrder {
  id             Int       @id @default(autoincrement())
  equipment      String
  accessories    String?
  complaint      String
  entryDate      DateTime  @default(now())
  status         String
  description    String
  serialNumber   String
  condition      String
  customerId     String
  underWarranty  Boolean   @default(false)
  brand          String
  model          String


  customer       Customer  @relation(fields: [customerId], references: [id])

  @@map("service_orders")
}